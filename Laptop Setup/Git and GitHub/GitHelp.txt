Git Cookbook
****************************************************
	To check to see if your local copy is up to date
	> git status
	
	To keep local repository up to date with the remote one get the latest commits from the remote repository. 
	> git pull origin master
	
	Check out a remote branch locally
	> git clone --branch <branchName> <remote-repo-url> <folder-name> 
		
	Merge master into my local feature branch
	>	git checkout 'myFeature'
	>	git merge --no-ff master
	
Git Cheat Sheet
****************************************************
	Branching:
		list what branches are available
		*	git branch
	
		switch existing branch i.e. master
		*  git checkout master
				Checking out a branch updates the files in the working directory to match the version stored 
				in that branch, and it tells Git to record all new commits on that branch. 
				Think of it as a way to select which line of development youâ€™re working on.
	
		create a new branch and automatically switch to it
		*	git checkout -b <new-branch-name> <existing-branch>
				The -b option is a convenience flag that tells Git to run git branch <new-branch-name> before running git checkout <new-branch-name>.
				By default git checkout -b will base the new-branch off the current HEAD.
				An optional additional branch parameter can be passed to git checkout. 
				In the above example, <existing-branch> is passed which then bases new-branch off of existing-branch instead of the current HEAD.
	
		delete a local branch
		*	git branch -d or -D <branch-name>
			The -d option is an alias for --delete, which only deletes the branch if it has already been
			fully merged in its upstream branch. You could also use -D, which is an alias for --delete --force, 
			which deletes the branch "irrespective of its merged status"
	
	Updating Code:
		*	git fetch
				Git gathers any commits from the target branch that do not exist in your current branch and stores
				them in your local repository. However, it does not merge them with your current branch.
				This is particularly useful if you need to keep your repository up to date,
				but are working on something that might break if you update your files.
				To integrate the commits into your master branch, you use merge.
				
		*	git pull
				Git tries to automatically do your work for you. It is context sensitive, so Git will merge any pulled
				commits into the branch you are currently working in. 
				Pull automatically merges the commits without letting you review them first
	
	Pushing Code:
		*	git push origin <branch-name>
				The git push command is used to upload local repository content to a remote repository.
				Pushing is how you transfer commits from your local repository to a remote repo.
				It's the counterpart to git fetch, but whereas fetching imports commits to local branches,
				pushing exports commits to remote branches.
				Git push is most commonly used to publish and upload local changes to a central repository.
				After a local repository has been modified a push is executed to share the modifications with remote team members.
	
	See Git History Graph with the last 15 entries
		* 	git log --graph --oneline -n 15
	
	fetch code from a remote repository
		*	git clone --branch release https://ngicnatgen@dev.azure.com/ngicnatgen/Services%20North/_git/PLL
	
	revert local back to last commit       
		*  git checkout.
	
	overwrite local branch with remote
		*  git reset --hard origin/[branch_name]
	
	remove untracked files
		*  git clean -fxd
	
	commit changes
		*  git commit -am "message goes here"
	
	Configuration:
		local
			By default, git config will write to a local level if no configuration option is 
			passed. Local level configuration is applied to the context repository git config gets
			invoked in. Local configuration values are stored in a file that can be found in the 
			repo's .git directory: .git/config
			
		global
			Global level configuration is user-specific, meaning it is applied to an operating system user. 
			Global configuration values are stored in a file that is located in a user's home directory.
			~ /.gitconfig on unix systems and C:\Users\<username>\.gitconfig on windows
			
		system
			System-level configuration is applied across an entire machine. This covers all users on an operating system and all repos.
			The system level configuration file lives in a gitconfig file off the system root path. $(prefix)/etc/gitconfig on unix 
			systems. On windows this file can be found at C:\Documents and Settings\All Users\Application Data\Git\config on
			Windows XP, and in C:\ProgramData\Git\config on Windows Vista and newer.

		edit the file at the specific location i.e. edit the local config.
		*  git config --local -e

		You can view all of your settings and where they are coming from using
			* git config --list --show-origin
			
			
Git Workflow Architecture
****************************************************
	origin/master:	Is the main branch where the source code of HEAD ALWAYS reflects a state with the
					latest delivered development changes for the next release.
					
	origin/release:	Is the main branch where the source code of HEAD ALWAYS reflects a production-ready state.
	
	Feature Branches
		* Branch off of master
		* Branch naming convention rs/feature-featureName
		* MUST merge back into master
		
		When starting work on a new feature branch:
			1. Get the latest from origin/master to your local master branch. On the local master branch run
				> git pull origin master
			2. Create a new feature branch from your local master by running
				> git checkout -b myFeature master
				
		Finished features can be merged into the master branch to add them to the upcoming release
			Switch to branch 'master'
			> git checkout master
			
			Merge your feature into master
			> git merge --no-ff myfeature
			
			You can then delete your local feature branch
			> git branch -d myfeature
			
			Create a Pull Request to merge your local master into origin/master

	Hotfix Branches
		Branch off of release
		Branch naming convention hotfix-hotfixName
		MUST merge back into release and mastergi
		
		Create a hotfix branch off the release branch
			1. Get the latest from origin/release to your local release branch. On the local release branch run
				> git pull origin release
			2. Create a new feature branch from your local release by running
				> git checkout -b hotfix-hotfixName release
		
		Don't forget to increment the version number if applicable
		
		Commit your changes on the local hotfix branch
			> git commit -a -m "Fixed issue 123"
		
		Push your local branch changes with origin/branchName
		
		When finished the hotfix needs to be merged back into release and master. This will ensure the fix is included in the next feature release.
			Update release and tag the release
			> git checkout release
			
			> git merge --no-ff hotfix-hotfixName
			
			> git tag -a hotfix number
		
		Repeat the above for master as well
		
		Create a Pull Request to merge your local release into origin/release


Azure Migration How To
*****************************************************
	Personal Access Token is an alternate password that you can use to authenticate into Azure.
		*	Personal access tokens let you create a password for use with the command line or other Git client
			without using your Azure DevOps Services username and password directly.
		*	Use PAT's if you are using non Microsoft tools like Git, NuGet
	Git Credential Managers
		*	Are an optional tool that makes it easy to create personal access tokens when working with Azure Repos.
			Normally you'd need to log into the Azure DevOps Services web portal, generate a token,
			then use the token as your password when connecting to Azure Repos.
		*	Personal access tokens are generated on demand when you have the credential manager installed.
			The credential manager creates the token in Azure DevOps Services and saves it locally for use with the Git command line or other client.
	
	Clone a Repo Via Bash:
		1. Go to the branch you wish to clone and click the clone icon in the upper right corner.
		2. Under Command Line Copy the url.
		3. In your bash terminal navigate the the folder you want to clone the repo to.
		4. In your bash terminal type $ git clone https://ngicnatgen@dev.azure.com/ngicnatgen/Services%20North/_git/PLL
		
	Create a dev branch on Azure Web:
		1. Go the the branch you want to create the branch of (i.e. master)
		2. Click the new branch button on the upper right corner.
		3. Give your branch a name following our guidelines i.e. rs-feature-12345.
		4. Click ok
		5. Go into that branch and click the clone button in the upper right corner.
		6. Click 'Cone in Visual Studio'
		7. If this is the first time visual studio may prompt you to sign into your account.
		8. Make sure you create a local folder to store your feature branch.
		9. When you get the Azure clone popup in visual studio make sure you point to your newly created folder. 
	